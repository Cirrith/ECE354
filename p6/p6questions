Name: Ryan Bambrough
Section: section 01
Partner's Name: Cheng-Hsiang Hsu
Partner's Section: section 01

Question - demo.c shows us that if a program is stuck in an infinite loop, it cannot go forward. Our program for a simple alarm (intdate.c) also has an infinite while loop. Yet, we see the print statements like below when we execute it -

% intdate
Date will be printed every 3 seconds.
Enter ^C to end the program:
current time is Tue Sep  4 13:15:21 2015
current time is Tue Sep  4 13:15:24 2015
current time is Tue Sep  4 13:15:27 2015
^C

How does the main function of intdate.c come out of the infinite while loop to print these statements?
The signals that we use are asynchronous to the main execution and are handled differently, they aren't part of the while loop. When the processor gets the signal it moves to the handler, ignoring the while loop, in order to 
take care of the signal. After doing what the handler specifies, whether is be default or programmed, it then goes back to where it left off in the main applicatoin, assuming it hasn't been terminated. So the main application 
is still stuck in the main loop, it can just break out to do other things according to signals.